img = load.image("bw_test2.png")
width = width(img); height=height(img)
img %<>% resize(size_x=linewidth, size_y=round(linewidth/width*height), size_c = 1) %>% {.>0.5} %>% as.matrix
img = apply(t(img), c(1,2), function(x) ifelse(x,"0","1"))
text = img %>% apply(1, function(x) paste0(x,collapse = ""))
text %<>% sapply(function(x) {r = floor(runif(1,0,nchar(x))); paste0(str_sub(x,1,r), key, str_sub(x,r+1,nchar(x)))})
text %<>% sapply(function(x) str_replace_all(x,"1", function(y) as.character((5:9)[floor(runif(1,5,10))])))
text %<>% sapply(function(x) str_replace_all(x,"0", function(y) as.character((0:4)[floor(runif(1,0,5))])))
(0:4)[floor(runif(100,0,5))]
(0:4)[floor(runif(100,0,6))]
(0:4)[floor(runif(100,0,6))]
(0:4)[floor(runif(100,0,6))]
(0:4)[floor(runif(100,0,6))]
runif(0,5)
runif(1,0,5)
runif(100,0,5)
floor(runif(100,0,5))
floor(runif(100,5,10))
floor(runif(100,5,10))
floor(runif(100,5,10))
(0:4)
(5:9)
text = img %>% apply(1, function(x) paste0(x,collapse = ""))
text %<>% sapply(function(x) {r = floor(runif(1,0,nchar(x))); paste0(str_sub(x,1,r), key, str_sub(x,r+1,nchar(x)))})
text %<>% sapply(function(x) str_replace_all(x,"1", function(y) as.character((5:9)[floor(runif(1,0,5))])))
text = img %>% apply(1, function(x) paste0(x,collapse = ""))
text %<>% sapply(function(x) {r = floor(runif(1,0,nchar(x))); paste0(str_sub(x,1,r), key, str_sub(x,r+1,nchar(x)))})
text %<>% sapply(function(x) str_replace_all(x,"1", function(y) as.character(floor(runif(1,5,10)))))
text %<>% sapply(function(x) str_replace_all(x,"0", function(y) as.character(floor(runif(1,0,5)))))
library(hgutils)
startup()
load_packages("imager","BMS","stringr")
linewidth = 183
key = "FACADE" %>% hex2bin %>% paste0(collapse = "")
img = load.image("bw_test2.png")
width = width(img); height=height(img)
img %<>% resize(size_x=linewidth, size_y=round(linewidth/width*height), size_c = 1) %>% {.>0.5} %>% as.matrix
img = apply(t(img), c(1,2), function(x) ifelse(x,"0","1"))
text = img %>% apply(1, function(x) paste0(x,collapse = ""))
text %<>% sapply(function(x) {r = floor(runif(1,0,nchar(x))); paste0(str_sub(x,1,r), key, str_sub(x,r+1,nchar(x)))})
text %<>% sapply(function(x) str_replace_all(x,"1", function(y) as.character(floor(runif(1,5,10)))))
text %<>% sapply(function(x) str_replace_all(x,"0", function(y) as.character(floor(runif(1,0,5)))))
writeLines(paste0(text,collapse = ""), "image_output.txt")
regex = key %>% str_replace_all("[0-4]","0") %>% str_replace_all("[5-9]","1")
library(hgutils)
startup()
load_packages("imager","BMS","stringr")
linewidth = 183
key = "FACADE" %>% hex2bin %>% paste0(collapse = "")
img = load.image("bw_test2.png")
width = width(img); height=height(img)
img %<>% resize(size_x=linewidth, size_y=round(linewidth/width*height), size_c = 1) %>% {.>0.5} %>% as.matrix
img = apply(t(img), c(1,2), function(x) ifelse(x,"0","1"))
text = img %>% apply(1, function(x) paste0(x,collapse = ""))
text %<>% sapply(function(x) {r = floor(runif(1,0,nchar(x))); paste0(str_sub(x,1,r), key, str_sub(x,r+1,nchar(x)))})
text %<>% sapply(function(x) str_replace_all(x,"1", function(y) as.character(floor(runif(1,5,10)))))
text %<>% sapply(function(x) str_replace_all(x,"0", function(y) as.character(floor(runif(1,0,5)))))
writeLines(paste0(text,collapse = ""), "image_output.txt")
str_replace_all(key,"[0-4]","0")
key
regex = key %>% str_replace_all("[5-9]","1") %>% str_replace_all("[0-4]","0")
key = "FACADE" %>% hex2bin %>% paste0(collapse = "")
key %>% str_replace_all("[5-9]","1")
regex = key %>% str_replace_all("1","[5-9]") %>% str_replace_all("0","[0-4]")
regex
paste0(text,collapse = "") %>% image
paste0(text,collapse = "")
library(hgutils)
startup()
load_packages("imager","BMS","stringr")
linewidth = 183
key = "FACADE" %>% hex2bin %>% paste0(collapse = "")
img = load.image("bw_test2.png")
width = width(img); height=height(img)
img %<>% resize(size_x=linewidth, size_y=round(linewidth/width*height), size_c = 1) %>% {.>0.5} %>% as.matrix
img = apply(t(img), c(1,2), function(x) ifelse(x,"0","1"))
text = img %>% apply(1, function(x) paste0(x,collapse = ""))
text %<>% sapply(function(x) {r = floor(runif(1,0,nchar(x))); paste0(str_sub(x,1,r), key, str_sub(x,r+1,nchar(x)))})
text %<>% sapply(function(x) str_replace_all(x,"1", function(y) as.character(floor(runif(1,5,10)))))
text %<>% sapply(function(x) str_replace_all(x,"0", function(y) as.character(floor(runif(1,0,5))))) %>% paste0(collapse = "")
writeLines(text, "image_output.txt")
library(hgutils)
startup()
load_packages("imager","BMS","stringr")
linewidth = 183
key = "FACADE" %>% hex2bin %>% paste0(collapse = "")
img = load.image("bw_test2.png")
width = width(img); height=height(img)
img %<>% resize(size_x=linewidth, size_y=round(linewidth/width*height), size_c = 1) %>% {.>0.5} %>% as.matrix
img = apply(t(img), c(1,2), function(x) ifelse(x,"0","1"))
text = img %>% apply(1, function(x) paste0(x,collapse = ""))
text %<>% sapply(function(x) {r = floor(runif(1,0,nchar(x))); paste0(str_sub(x,1,r), key, str_sub(x,r+1,nchar(x)))})
#text %<>% sapply(function(x) str_replace_all(x,"1", function(y) as.character(floor(runif(1,5,10)))))
#text %<>% sapply(function(x) str_replace_all(x,"0", function(y) as.character(floor(runif(1,0,5))))) %>%
text %<>% paste0(collapse = "")
writeLines(text, "image_output.txt")
library(hgutils)
startup()
load_packages("imager","BMS","stringr")
linewidth = 183
key = "FACADE" %>% hex2bin %>% paste0(collapse = "")
img = load.image("bw_test2.png")
plot(img)
runif(1)
runif
runif()
runif(1)
library(hgutils)
startup()
load_packages("imager","BMS","stringr")
linewidth = 183
key = "FACADE" %>% hex2bin %>% paste0(collapse = "")
img = load.image("bw_test2.png")
width = width(img); height=height(img)
img %<>% resize(size_x=linewidth, size_y=round(linewidth/width*height), size_c = 1) %>% {.>0.5} %>% as.matrix
img = apply(t(img), c(1,2), function(x) ifelse(x,ifelse(runif(1)>0.8,"0","1"),"1"))
text = img %>% apply(1, function(x) paste0(x,collapse = ""))
text %<>% sapply(function(x) {r = floor(runif(1,0,nchar(x))); paste0(str_sub(x,1,r), key, str_sub(x,r+1,nchar(x)))})
#text %<>% sapply(function(x) str_replace_all(x,"1", function(y) as.character(floor(runif(1,5,10)))))
#text %<>% sapply(function(x) str_replace_all(x,"0", function(y) as.character(floor(runif(1,0,5))))) %>%
text %<>% paste0(collapse = "")
writeLines(text, "image_output.txt")
regex = key %>% str_replace_all("1","[5-9]") %>% str_replace_all("0","[0-4]")
#remove all regex occurences of: 11111.1.11..1.1.11.1111.
#set all [0,2-9] occurrences to " "
txt
library(hgutils)
startup()
load_packages("imager","BMS","stringr")
linewidth = 183
key = "FACADE" %>% hex2bin %>% paste0(collapse = "")
img = load.image("bw_test2.png")
width = width(img); height=height(img)
img %<>% resize(size_x=linewidth, size_y=round(linewidth/width*height), size_c = 1) %>% {.>0.5} %>% as.matrix
img = apply(t(img), c(1,2), function(x) ifelse(x,ifelse(runif(1)>0.8,"0","1"),"1"))
text = img %>% apply(1, function(x) paste0(x,collapse = ""))
text %<>% sapply(function(x) {r = floor(runif(1,0,nchar(x))); paste0(str_sub(x,1,r), key, str_sub(x,r+1,nchar(x)))})
#text %<>% sapply(function(x) str_replace_all(x,"1", function(y) as.character(floor(runif(1,5,10)))))
#text %<>% sapply(function(x) str_replace_all(x,"0", function(y) as.character(floor(runif(1,0,5))))) %>%
text %<>% paste0(collapse = "")
writeLines(text, "image_output.txt")
regex = key %>% str_replace_all("1","[5-9]") %>% str_replace_all("0","[0-4]")
#remove all regex occurences of: 11111.1.11..1.1.11.1111.
#set all [0,2-9] occurrences to " "
library(hgutils)
startup()
load_packages("imager","BMS","stringr")
linewidth = 183
key = "FACADE" %>% hex2bin %>% paste0(collapse = "")
img = load.image("bw_test2.png")
width = width(img); height=height(img)
img %<>% resize(size_x=linewidth, size_y=round(linewidth/width*height), size_c = 1) %>% {.>0.5} %>% as.matrix
img = apply(t(img), c(1,2), function(x) ifelse(x,ifelse(runif(1)>0.9,"0","1"),"1"))
text = img %>% apply(1, function(x) paste0(x,collapse = ""))
text %<>% sapply(function(x) {r = floor(runif(1,0,nchar(x))); paste0(str_sub(x,1,r), key, str_sub(x,r+1,nchar(x)))})
#text %<>% sapply(function(x) str_replace_all(x,"1", function(y) as.character(floor(runif(1,5,10)))))
#text %<>% sapply(function(x) str_replace_all(x,"0", function(y) as.character(floor(runif(1,0,5))))) %>%
text %<>% paste0(collapse = "")
writeLines(text, "image_output.txt")
regex = key %>% str_replace_all("1","[5-9]") %>% str_replace_all("0","[0-4]")
#remove all regex occurences of: 11111.1.11..1.1.11.1111.
#set all [0,2-9] occurrences to " "
library(hgutils)
startup()
load_packages("imager","BMS","stringr")
linewidth = 183
key = "FACADE" %>% hex2bin %>% paste0(collapse = "")
img = load.image("bw_test2.png")
width = width(img); height=height(img)
img %<>% resize(size_x=linewidth, size_y=round(linewidth/width*height), size_c = 1) %>% {.>0.5} %>% as.matrix
img = apply(t(img), c(1,2), function(x) ifelse(x,ifelse(runif(1)>0.9,"0","1"),"1"))
text = img %>% apply(1, function(x) paste0(x,collapse = ""))
sapply(function(x) str_detect(x,key))
sapply(text, function(x) str_detect(x,key))
library(hgutils)
startup()
load_packages("imager","BMS","stringr")
linewidth = 183
key = "FACADE" %>% hex2bin %>% paste0(collapse = "")
img = load.image("bw_test2.png")
width = width(img); height=height(img)
ok = FALSE
while(!ok) {
img %<>% resize(size_x=linewidth, size_y=round(linewidth/width*height), size_c = 1) %>% {.>0.5} %>% as.matrix
img = apply(t(img), c(1,2), function(x) ifelse(x,ifelse(runif(1)>0.9,"0","1"),"1"))
ok = all(sapply(text, function(x) str_detect(x,key)))
}
library(hgutils)
startup()
load_packages("imager","BMS","stringr")
linewidth = 183
key = "FACADE" %>% hex2bin %>% paste0(collapse = "")
img = load.image("bw_test2.png")
width = width(img); height=height(img)
ok = FALSE
while(!ok) {
img %<>% resize(size_x=linewidth, size_y=round(linewidth/width*height), size_c = 1) %>% {.>0.5} %>% as.matrix
img = apply(t(img), c(1,2), function(x) ifelse(x,ifelse(runif(1)>0.9,"0","1"),"1"))
text = img %>% apply(1, function(x) paste0(x,collapse = ""))
ok = all(sapply(text, function(x) str_detect(x,key)))
}
img = load.image("bw_test2.png")
width = width(img); height=height(img)
img %<>% resize(size_x=linewidth, size_y=round(linewidth/width*height), size_c = 1) %>% {.>0.5} %>% as.matrix
img = apply(t(img), c(1,2), function(x) ifelse(x,ifelse(runif(1)>0.9,"0","1"),"1"))
text = img %>% apply(1, function(x) paste0(x,collapse = ""))
all(sapply(text, function(x) str_detect(x,key)))
sapply(text, function(x) str_detect(x,key))
ok = !any(sapply(text, function(x) str_detect(x,key)))
library(hgutils)
startup()
load_packages("imager","BMS","stringr")
linewidth = 183
key = "FACADE" %>% hex2bin %>% paste0(collapse = "")
ok = FALSE
while(!ok) {
img = load.image("bw_test2.png")
width = width(img); height=height(img)
img %<>% resize(size_x=linewidth, size_y=round(linewidth/width*height), size_c = 1) %>% {.>0.5} %>% as.matrix
img = apply(t(img), c(1,2), function(x) ifelse(x,ifelse(runif(1)>0.9,"0","1"),"1"))
text = img %>% apply(1, function(x) paste0(x,collapse = ""))
ok = !any(sapply(text, function(x) str_detect(x,key)))
}
text %<>% sapply(function(x) {r = floor(runif(1,0,nchar(x))); paste0(str_sub(x,1,r), key, str_sub(x,r+1,nchar(x)))})
#text %<>% sapply(function(x) str_replace_all(x,"1", function(y) as.character(floor(runif(1,5,10)))))
#text %<>% sapply(function(x) str_replace_all(x,"0", function(y) as.character(floor(runif(1,0,5))))) %>%
text %<>% paste0(collapse = "")
writeLines(text, "image_output.txt")
img %<>% resize(size_x=linewidth, size_y=round(linewidth/width*height), size_c = 1) %>% {.>0.5} %>% as.matrix
img = load.image("bw_test2.png")
width = width(img); height=height(img)
img %<>% resize(size_x=linewidth, size_y=round(linewidth/width*height), size_c = 1) %>% {.>0.5} %>% as.matrix
runif(1)>0.9
runif(1)>0.9
runif(1)>0.9
runif(1)>0.9
runif(1)>0.9
runif(1)
runif(1)
runif(1)
library(hgutils)
startup()
load_packages("imager","BMS","stringr")
linewidth = 183
key = "FACADE" %>% hex2bin %>% paste0(collapse = "")
ok = FALSE
while(!ok) {
img = load.image("bw_test2.png")
width = width(img); height=height(img)
img %<>% resize(size_x=linewidth, size_y=round(linewidth/width*height), size_c = 1) %>% {.>0.5} %>% as.matrix
img = apply(t(img), c(1,2), function(x) ifelse(x,ifelse(runif(1)>0.9,"1","0"),"1"))
text = img %>% apply(1, function(x) paste0(x,collapse = ""))
ok = !any(sapply(text, function(x) str_detect(x,key)))
}
text %<>% sapply(function(x) {r = floor(runif(1,0,nchar(x))); paste0(str_sub(x,1,r), key, str_sub(x,r+1,nchar(x)))})
#text %<>% sapply(function(x) str_replace_all(x,"1", function(y) as.character(floor(runif(1,5,10)))))
#text %<>% sapply(function(x) str_replace_all(x,"0", function(y) as.character(floor(runif(1,0,5))))) %>%
text %<>% paste0(collapse = "")
writeLines(text, "image_output.txt")
#regex = key %>% str_replace_all("1","[5-9]") %>% str_replace_all("0","[0-4]")
#remove all regex occurences of: 11111.1.11..1.1.11.1111.
#set all [0,2-9] occurrences to " "
text %<>% str_replace_all("111110101100101011011110","")
decoded = str_replace_all(text, "111110101100101011011110","") %>% str_split("")
decoded = str_replace_all(text, "111110101100101011011110","") %>% str_split("")[[1]]
decoded = str_replace_all(text, "111110101100101011011110","") %>% {str_split(., "")[[1]]}
decoded = str_replace_all(text, "111110101100101011011110","") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric)
#code = "111110101100101011011110"
code=""
decoded = str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric)
#code = "111110101100101011011110"
code="as"
decoded = str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric)
decoded = str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric) %>% as.matrix(ncol=linewidth)
decoded = str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric) %>% as.matrix(ncol=linewidth, byrow=TRUE)
decoded = str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric) %>% matrix(ncol=linewidth, byrow=TRUE)
str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric) %>% matrix(ncol=linewidth, byrow=TRUE) %>% image
str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric) %>% matrix(ncol=linewidth, byrow=TRUE) %>% t %>% image
str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric) %>% matrix(ncol=linewidth) %>% t %>% image
str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric) %>% matrix(ncol=linewidth) %>% image
str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric) %>% matrix(ncol=linewidth, byrow = TRUE) %>% image
str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric) %>% matrix(ncol=linewidth, byrow = TRUE) %>% t %>% image
rotate <- function(x) t(apply(x, 2, rev))
str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric) %>% matrix(ncol=linewidth, byrow = TRUE) %>% rotate %>% image
library(hgutils)
startup()
load_packages("imager","BMS","stringr")
linewidth = 183
key = "FACADE" %>% hex2bin %>% paste0(collapse = "")
ok = FALSE
while(!ok) {
img = load.image("bw_test2.png")
width = width(img); height=height(img)
img %<>% resize(size_x=linewidth, size_y=round(linewidth/width*height), size_c = 1) %>% {.>0.5} %>% as.matrix
img = apply(t(img), c(1,2), function(x) ifelse(x,ifelse(runif(1)>0.9,"1","0"),"1"))
text = img %>% apply(1, function(x) paste0(x,collapse = ""))
ok = !any(sapply(text, function(x) str_detect(x,key)))
}
text %<>% sapply(function(x) {r = floor(runif(1,0,nchar(x))); paste0(str_sub(x,1,r), key, str_sub(x,r+1,nchar(x)))})
#text %<>% sapply(function(x) str_replace_all(x,"1", function(y) as.character(floor(runif(1,5,10)))))
#text %<>% sapply(function(x) str_replace_all(x,"0", function(y) as.character(floor(runif(1,0,5))))) %>%
text %<>% paste0(collapse = "")
writeLines(text, "image_output.txt")
#code = "111110101100101011011110"
code="as"
rotate <- function(x) t(apply(x, 2, rev))
str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric) %>% matrix(ncol=linewidth, byrow = TRUE) %>% rotate %>% image
str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric) %>% stfu(matrix(ncol=linewidth, byrow = TRUE)) %>% rotate %>% image
str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric) %>% {stfu(matrix(., ncol=linewidth, byrow = TRUE))} %>% rotate %>% image
#code = "111110101100101011011110"
code="1001"
rotate <- function(x) t(apply(x, 2, rev))
str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric) %>% {stfu(matrix(., ncol=linewidth, byrow = TRUE))} %>% rotate %>% image
#code = "111110101100101011011110"
code="111110101100101011011110"
rotate <- function(x) t(apply(x, 2, rev))
str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric) %>% {stfu(matrix(., ncol=linewidth, byrow = TRUE))} %>% rotate %>% image
img = str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric) %>% {stfu(matrix(., ncol=linewidth, byrow = TRUE))}
melt(img)
load_packages("imager","BMS","stringr", "ggplot2", "reshape2")
melt(img)
df = melt(img) %>% set_colnames(c("x","y","val"))
ggplot(df, aes(x=x, y=y)) + geom_raster(fill=value)
ggplot(df, aes(x=x, y=y, fill=value)) + geom_raster()
ggplot(df, aes(x=x, y=y, fill=val)) + geom_raster()
img = str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric) %>% {stfu(matrix(., ncol=linewidth, byrow = TRUE))} %>% rotate
df = melt(img) %>% set_colnames(c("x","y","val"))
ggplot(df, aes(x=x, y=y, fill=val)) + geom_raster()
ggplot(df, aes(x=x, y=y, fill=val)) + geom_raster() + cowplot::theme_nothing()
img = str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% {stfu(matrix(., ncol=linewidth, byrow = TRUE))} %>% rotate
df = melt(img) %>% set_colnames(c("x","y","val"))
ggplot(df, aes(x=x, y=y, fill=val)) + geom_raster() + cowplot::theme_nothing() + theme
ggplot(df, aes(x=x, y=y, fill=val)) + geom_raster() + cowplot::theme_nothing()
ggplot(df, aes(x=x, y=y, fill=val)) + geom_raster() + cowplot::theme_nothing() + scale_fill_manual(c("black","white"))
ggplot(df, aes(x=x, y=y, fill=val)) + geom_raster() + cowplot::theme_nothing() + scale_fill_manual(values = c("black","white"))
ggplot(df, aes(x=x, y=y, fill=val)) + geom_raster() + cowplot::theme_nothing() + scale_fill_manual(values = c("white","black"))
#code = "111110101100101011011110"
code="as"
rotate <- function(x) t(apply(x, 2, rev))
img = str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% {stfu(matrix(., ncol=linewidth, byrow = TRUE))} %>% rotate
df = melt(img) %>% set_colnames(c("x","y","val"))
ggplot(df, aes(x=x, y=y, fill=val)) + geom_raster() + cowplot::theme_nothing() + scale_fill_manual(values = c("white","black"))
#code = "111110101100101011011110"
code="010111100"
rotate <- function(x) t(apply(x, 2, rev))
img = str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% {stfu(matrix(., ncol=linewidth, byrow = TRUE))} %>% rotate
df = melt(img) %>% set_colnames(c("x","y","val"))
ggplot(df, aes(x=x, y=y, fill=val)) + geom_raster() + cowplot::theme_nothing() + scale_fill_manual(values = c("white","black"))
#code = "111110101100101011011110"
code="111110101100101011011110"
img = str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% {stfu(matrix(., ncol=linewidth, byrow = TRUE))} %>% rotate
rotate <- function(x) t(apply(x, 2, rev))
df = melt(img) %>% set_colnames(c("x","y","val"))
ggplot(df, aes(x=x, y=y, fill=val)) + geom_raster() + cowplot::theme_nothing() + scale_fill_manual(values = c("white","black"))
library(rms)
fit <- survfit(Surv(time, status) ~ x, data = aml)
fit
fit <- coxph(Surv(futime, fustat) ~ age, data = ovarian)
survfit(fit)
fit <- coxph(Surv(futime, fustat) ~ age, data = lung)
fit <- coxph(Surv(time, status==2) ~ age, data = lung)
survfit(fit)
a=make.socket("192.168.0.3",port=13,server=FALSE)
make.socket
a=make.socket("127.0.0.1",port=13,server=FALSE)
server <- function(){
while(TRUE){
writeLines("Listening...")
con <- socketConnection(host="127.0.0.1", port = 7337, blocking=TRUE,
server=TRUE, open="r+")
data <- readLines(con, 1)
print(data)
close(con)
}
}
client <- function(){
while(TRUE){
con <- socketConnection(host="127.0.0.1", port = 7337, blocking=TRUE,
server=FALSE, open="r+")
sendme <- readline("Enter text to be upper-cased, q to quit")
if(tolower(sendme)=="q"){
break
}
write_resp <- writeLines(sendme, con)
close(con)
}
}
client()
client()
client <- function(){
while(TRUE){
con <- socketConnection(host="192.168.2.1", port = 7337, blocking=TRUE,
server=FALSE, open="r+")
sendme <- readline("Enter text to be upper-cased, q to quit")
if(tolower(sendme)=="q"){
break
}
write_resp <- writeLines(sendme, con)
close(con)
}
}
client()
server <- function(){
while(TRUE){
writeLines("Listening...")
con <- socketConnection(host="localhost", port = 7337, blocking=TRUE,
server=TRUE, open="r+")
data <- readLines(con, 1)
print(data)
close(con)
}
}
client <- function(){
while(TRUE){
con <- socketConnection(host="192.168.2.254", port = 7337, blocking=TRUE,
server=FALSE, open="r+")
sendme <- readline("Enter text to be upper-cased, q to quit")
if(tolower(sendme)=="q"){
break
}
write_resp <- writeLines(sendme, con)
close(con)
}
}
client()
client <- function(){
while(TRUE){
con <- socketConnection(host="127.0.0.1", port = 7337, blocking=TRUE,
server=FALSE, open="r+")
sendme <- readline("Enter text to be upper-cased, q to quit")
if(tolower(sendme)=="q"){
break
}
write_resp <- writeLines(sendme, con)
close(con)
}
}
client()
server <- function(){
while(TRUE){
writeLines("Listening...")
con <- socketConnection(host="192.168.2.1", port = 7337, blocking=TRUE,
server=TRUE, open="r+")
data <- readLines(con, 1)
print(data)
close(con)
}
}
client <- function(){
while(TRUE){
con <- socketConnection(host="192.168.2.1", port = 7337, blocking=TRUE,
server=FALSE, open="r+")
sendme <- readline("Enter text to be upper-cased, q to quit")
if(tolower(sendme)=="q"){
break
}
write_resp <- writeLines(sendme, con)
close(con)
}
}
client()
server()
server <- function(){
while(TRUE){
writeLines("Listening...")
con <- socketConnection(host="192.168.2.1", port = 7337, blocking=TRUE,
server=TRUE, open="r+")
data <- readLines(con, 1)
print(data)
close(con)
}
}
client <- function(){
while(TRUE){
con <- socketConnection(host="192.168.2.1", port = 7337, blocking=TRUE,
server=FALSE, open="r+")
sendme <- readline("Enter text to be upper-cased, q to quit: ")
if(tolower(sendme)=="q"){
break
}
write_resp <- writeLines(sendme, con)
close(con)
}
}
client()
server()
client()
server <- function(){
while(TRUE){
writeLines("Listening...")
con <- socketConnection(host="192.168.2.1", port = 7337, blocking=TRUE,
server=TRUE, open="r+")
data <- readLines(con, 1)
print(data)
close(con)
}
}
client <- function(){
while(TRUE){
con <- socketConnection(host="192.168.2.1", port = 7337, blocking=TRUE,
server=FALSE, open="r+")
sendme <- readline("Enter text to be upper-cased, q to quit: ")
if(tolower(sendme)=="q"){
break
}
write_resp <- writeLines(sendme, con)
close(con)
}
}
#server()
library(crayon)
cat(red("hallo"),"\n")
