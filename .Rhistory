paste0(text,collapse = "") %>% image
paste0(text,collapse = "")
library(hgutils)
startup()
load_packages("imager","BMS","stringr")
linewidth = 183
key = "FACADE" %>% hex2bin %>% paste0(collapse = "")
img = load.image("bw_test2.png")
width = width(img); height=height(img)
img %<>% resize(size_x=linewidth, size_y=round(linewidth/width*height), size_c = 1) %>% {.>0.5} %>% as.matrix
img = apply(t(img), c(1,2), function(x) ifelse(x,"0","1"))
text = img %>% apply(1, function(x) paste0(x,collapse = ""))
text %<>% sapply(function(x) {r = floor(runif(1,0,nchar(x))); paste0(str_sub(x,1,r), key, str_sub(x,r+1,nchar(x)))})
text %<>% sapply(function(x) str_replace_all(x,"1", function(y) as.character(floor(runif(1,5,10)))))
text %<>% sapply(function(x) str_replace_all(x,"0", function(y) as.character(floor(runif(1,0,5))))) %>% paste0(collapse = "")
writeLines(text, "image_output.txt")
library(hgutils)
startup()
load_packages("imager","BMS","stringr")
linewidth = 183
key = "FACADE" %>% hex2bin %>% paste0(collapse = "")
img = load.image("bw_test2.png")
width = width(img); height=height(img)
img %<>% resize(size_x=linewidth, size_y=round(linewidth/width*height), size_c = 1) %>% {.>0.5} %>% as.matrix
img = apply(t(img), c(1,2), function(x) ifelse(x,"0","1"))
text = img %>% apply(1, function(x) paste0(x,collapse = ""))
text %<>% sapply(function(x) {r = floor(runif(1,0,nchar(x))); paste0(str_sub(x,1,r), key, str_sub(x,r+1,nchar(x)))})
#text %<>% sapply(function(x) str_replace_all(x,"1", function(y) as.character(floor(runif(1,5,10)))))
#text %<>% sapply(function(x) str_replace_all(x,"0", function(y) as.character(floor(runif(1,0,5))))) %>%
text %<>% paste0(collapse = "")
writeLines(text, "image_output.txt")
library(hgutils)
startup()
load_packages("imager","BMS","stringr")
linewidth = 183
key = "FACADE" %>% hex2bin %>% paste0(collapse = "")
img = load.image("bw_test2.png")
plot(img)
runif(1)
runif
runif()
runif(1)
library(hgutils)
startup()
load_packages("imager","BMS","stringr")
linewidth = 183
key = "FACADE" %>% hex2bin %>% paste0(collapse = "")
img = load.image("bw_test2.png")
width = width(img); height=height(img)
img %<>% resize(size_x=linewidth, size_y=round(linewidth/width*height), size_c = 1) %>% {.>0.5} %>% as.matrix
img = apply(t(img), c(1,2), function(x) ifelse(x,ifelse(runif(1)>0.8,"0","1"),"1"))
text = img %>% apply(1, function(x) paste0(x,collapse = ""))
text %<>% sapply(function(x) {r = floor(runif(1,0,nchar(x))); paste0(str_sub(x,1,r), key, str_sub(x,r+1,nchar(x)))})
#text %<>% sapply(function(x) str_replace_all(x,"1", function(y) as.character(floor(runif(1,5,10)))))
#text %<>% sapply(function(x) str_replace_all(x,"0", function(y) as.character(floor(runif(1,0,5))))) %>%
text %<>% paste0(collapse = "")
writeLines(text, "image_output.txt")
regex = key %>% str_replace_all("1","[5-9]") %>% str_replace_all("0","[0-4]")
#remove all regex occurences of: 11111.1.11..1.1.11.1111.
#set all [0,2-9] occurrences to " "
txt
library(hgutils)
startup()
load_packages("imager","BMS","stringr")
linewidth = 183
key = "FACADE" %>% hex2bin %>% paste0(collapse = "")
img = load.image("bw_test2.png")
width = width(img); height=height(img)
img %<>% resize(size_x=linewidth, size_y=round(linewidth/width*height), size_c = 1) %>% {.>0.5} %>% as.matrix
img = apply(t(img), c(1,2), function(x) ifelse(x,ifelse(runif(1)>0.8,"0","1"),"1"))
text = img %>% apply(1, function(x) paste0(x,collapse = ""))
text %<>% sapply(function(x) {r = floor(runif(1,0,nchar(x))); paste0(str_sub(x,1,r), key, str_sub(x,r+1,nchar(x)))})
#text %<>% sapply(function(x) str_replace_all(x,"1", function(y) as.character(floor(runif(1,5,10)))))
#text %<>% sapply(function(x) str_replace_all(x,"0", function(y) as.character(floor(runif(1,0,5))))) %>%
text %<>% paste0(collapse = "")
writeLines(text, "image_output.txt")
regex = key %>% str_replace_all("1","[5-9]") %>% str_replace_all("0","[0-4]")
#remove all regex occurences of: 11111.1.11..1.1.11.1111.
#set all [0,2-9] occurrences to " "
library(hgutils)
startup()
load_packages("imager","BMS","stringr")
linewidth = 183
key = "FACADE" %>% hex2bin %>% paste0(collapse = "")
img = load.image("bw_test2.png")
width = width(img); height=height(img)
img %<>% resize(size_x=linewidth, size_y=round(linewidth/width*height), size_c = 1) %>% {.>0.5} %>% as.matrix
img = apply(t(img), c(1,2), function(x) ifelse(x,ifelse(runif(1)>0.9,"0","1"),"1"))
text = img %>% apply(1, function(x) paste0(x,collapse = ""))
text %<>% sapply(function(x) {r = floor(runif(1,0,nchar(x))); paste0(str_sub(x,1,r), key, str_sub(x,r+1,nchar(x)))})
#text %<>% sapply(function(x) str_replace_all(x,"1", function(y) as.character(floor(runif(1,5,10)))))
#text %<>% sapply(function(x) str_replace_all(x,"0", function(y) as.character(floor(runif(1,0,5))))) %>%
text %<>% paste0(collapse = "")
writeLines(text, "image_output.txt")
regex = key %>% str_replace_all("1","[5-9]") %>% str_replace_all("0","[0-4]")
#remove all regex occurences of: 11111.1.11..1.1.11.1111.
#set all [0,2-9] occurrences to " "
library(hgutils)
startup()
load_packages("imager","BMS","stringr")
linewidth = 183
key = "FACADE" %>% hex2bin %>% paste0(collapse = "")
img = load.image("bw_test2.png")
width = width(img); height=height(img)
img %<>% resize(size_x=linewidth, size_y=round(linewidth/width*height), size_c = 1) %>% {.>0.5} %>% as.matrix
img = apply(t(img), c(1,2), function(x) ifelse(x,ifelse(runif(1)>0.9,"0","1"),"1"))
text = img %>% apply(1, function(x) paste0(x,collapse = ""))
sapply(function(x) str_detect(x,key))
sapply(text, function(x) str_detect(x,key))
library(hgutils)
startup()
load_packages("imager","BMS","stringr")
linewidth = 183
key = "FACADE" %>% hex2bin %>% paste0(collapse = "")
img = load.image("bw_test2.png")
width = width(img); height=height(img)
ok = FALSE
while(!ok) {
img %<>% resize(size_x=linewidth, size_y=round(linewidth/width*height), size_c = 1) %>% {.>0.5} %>% as.matrix
img = apply(t(img), c(1,2), function(x) ifelse(x,ifelse(runif(1)>0.9,"0","1"),"1"))
ok = all(sapply(text, function(x) str_detect(x,key)))
}
library(hgutils)
startup()
load_packages("imager","BMS","stringr")
linewidth = 183
key = "FACADE" %>% hex2bin %>% paste0(collapse = "")
img = load.image("bw_test2.png")
width = width(img); height=height(img)
ok = FALSE
while(!ok) {
img %<>% resize(size_x=linewidth, size_y=round(linewidth/width*height), size_c = 1) %>% {.>0.5} %>% as.matrix
img = apply(t(img), c(1,2), function(x) ifelse(x,ifelse(runif(1)>0.9,"0","1"),"1"))
text = img %>% apply(1, function(x) paste0(x,collapse = ""))
ok = all(sapply(text, function(x) str_detect(x,key)))
}
img = load.image("bw_test2.png")
width = width(img); height=height(img)
img %<>% resize(size_x=linewidth, size_y=round(linewidth/width*height), size_c = 1) %>% {.>0.5} %>% as.matrix
img = apply(t(img), c(1,2), function(x) ifelse(x,ifelse(runif(1)>0.9,"0","1"),"1"))
text = img %>% apply(1, function(x) paste0(x,collapse = ""))
all(sapply(text, function(x) str_detect(x,key)))
sapply(text, function(x) str_detect(x,key))
ok = !any(sapply(text, function(x) str_detect(x,key)))
library(hgutils)
startup()
load_packages("imager","BMS","stringr")
linewidth = 183
key = "FACADE" %>% hex2bin %>% paste0(collapse = "")
ok = FALSE
while(!ok) {
img = load.image("bw_test2.png")
width = width(img); height=height(img)
img %<>% resize(size_x=linewidth, size_y=round(linewidth/width*height), size_c = 1) %>% {.>0.5} %>% as.matrix
img = apply(t(img), c(1,2), function(x) ifelse(x,ifelse(runif(1)>0.9,"0","1"),"1"))
text = img %>% apply(1, function(x) paste0(x,collapse = ""))
ok = !any(sapply(text, function(x) str_detect(x,key)))
}
text %<>% sapply(function(x) {r = floor(runif(1,0,nchar(x))); paste0(str_sub(x,1,r), key, str_sub(x,r+1,nchar(x)))})
#text %<>% sapply(function(x) str_replace_all(x,"1", function(y) as.character(floor(runif(1,5,10)))))
#text %<>% sapply(function(x) str_replace_all(x,"0", function(y) as.character(floor(runif(1,0,5))))) %>%
text %<>% paste0(collapse = "")
writeLines(text, "image_output.txt")
img %<>% resize(size_x=linewidth, size_y=round(linewidth/width*height), size_c = 1) %>% {.>0.5} %>% as.matrix
img = load.image("bw_test2.png")
width = width(img); height=height(img)
img %<>% resize(size_x=linewidth, size_y=round(linewidth/width*height), size_c = 1) %>% {.>0.5} %>% as.matrix
runif(1)>0.9
runif(1)>0.9
runif(1)>0.9
runif(1)>0.9
runif(1)>0.9
runif(1)
runif(1)
runif(1)
library(hgutils)
startup()
load_packages("imager","BMS","stringr")
linewidth = 183
key = "FACADE" %>% hex2bin %>% paste0(collapse = "")
ok = FALSE
while(!ok) {
img = load.image("bw_test2.png")
width = width(img); height=height(img)
img %<>% resize(size_x=linewidth, size_y=round(linewidth/width*height), size_c = 1) %>% {.>0.5} %>% as.matrix
img = apply(t(img), c(1,2), function(x) ifelse(x,ifelse(runif(1)>0.9,"1","0"),"1"))
text = img %>% apply(1, function(x) paste0(x,collapse = ""))
ok = !any(sapply(text, function(x) str_detect(x,key)))
}
text %<>% sapply(function(x) {r = floor(runif(1,0,nchar(x))); paste0(str_sub(x,1,r), key, str_sub(x,r+1,nchar(x)))})
#text %<>% sapply(function(x) str_replace_all(x,"1", function(y) as.character(floor(runif(1,5,10)))))
#text %<>% sapply(function(x) str_replace_all(x,"0", function(y) as.character(floor(runif(1,0,5))))) %>%
text %<>% paste0(collapse = "")
writeLines(text, "image_output.txt")
#regex = key %>% str_replace_all("1","[5-9]") %>% str_replace_all("0","[0-4]")
#remove all regex occurences of: 11111.1.11..1.1.11.1111.
#set all [0,2-9] occurrences to " "
text %<>% str_replace_all("111110101100101011011110","")
decoded = str_replace_all(text, "111110101100101011011110","") %>% str_split("")
decoded = str_replace_all(text, "111110101100101011011110","") %>% str_split("")[[1]]
decoded = str_replace_all(text, "111110101100101011011110","") %>% {str_split(., "")[[1]]}
decoded = str_replace_all(text, "111110101100101011011110","") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric)
#code = "111110101100101011011110"
code=""
decoded = str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric)
#code = "111110101100101011011110"
code="as"
decoded = str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric)
decoded = str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric) %>% as.matrix(ncol=linewidth)
decoded = str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric) %>% as.matrix(ncol=linewidth, byrow=TRUE)
decoded = str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric) %>% matrix(ncol=linewidth, byrow=TRUE)
str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric) %>% matrix(ncol=linewidth, byrow=TRUE) %>% image
str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric) %>% matrix(ncol=linewidth, byrow=TRUE) %>% t %>% image
str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric) %>% matrix(ncol=linewidth) %>% t %>% image
str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric) %>% matrix(ncol=linewidth) %>% image
str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric) %>% matrix(ncol=linewidth, byrow = TRUE) %>% image
str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric) %>% matrix(ncol=linewidth, byrow = TRUE) %>% t %>% image
rotate <- function(x) t(apply(x, 2, rev))
str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric) %>% matrix(ncol=linewidth, byrow = TRUE) %>% rotate %>% image
library(hgutils)
startup()
load_packages("imager","BMS","stringr")
linewidth = 183
key = "FACADE" %>% hex2bin %>% paste0(collapse = "")
ok = FALSE
while(!ok) {
img = load.image("bw_test2.png")
width = width(img); height=height(img)
img %<>% resize(size_x=linewidth, size_y=round(linewidth/width*height), size_c = 1) %>% {.>0.5} %>% as.matrix
img = apply(t(img), c(1,2), function(x) ifelse(x,ifelse(runif(1)>0.9,"1","0"),"1"))
text = img %>% apply(1, function(x) paste0(x,collapse = ""))
ok = !any(sapply(text, function(x) str_detect(x,key)))
}
text %<>% sapply(function(x) {r = floor(runif(1,0,nchar(x))); paste0(str_sub(x,1,r), key, str_sub(x,r+1,nchar(x)))})
#text %<>% sapply(function(x) str_replace_all(x,"1", function(y) as.character(floor(runif(1,5,10)))))
#text %<>% sapply(function(x) str_replace_all(x,"0", function(y) as.character(floor(runif(1,0,5))))) %>%
text %<>% paste0(collapse = "")
writeLines(text, "image_output.txt")
#code = "111110101100101011011110"
code="as"
rotate <- function(x) t(apply(x, 2, rev))
str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric) %>% matrix(ncol=linewidth, byrow = TRUE) %>% rotate %>% image
str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric) %>% stfu(matrix(ncol=linewidth, byrow = TRUE)) %>% rotate %>% image
str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric) %>% {stfu(matrix(., ncol=linewidth, byrow = TRUE))} %>% rotate %>% image
#code = "111110101100101011011110"
code="1001"
rotate <- function(x) t(apply(x, 2, rev))
str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric) %>% {stfu(matrix(., ncol=linewidth, byrow = TRUE))} %>% rotate %>% image
#code = "111110101100101011011110"
code="111110101100101011011110"
rotate <- function(x) t(apply(x, 2, rev))
str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric) %>% {stfu(matrix(., ncol=linewidth, byrow = TRUE))} %>% rotate %>% image
img = str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric) %>% {stfu(matrix(., ncol=linewidth, byrow = TRUE))}
melt(img)
load_packages("imager","BMS","stringr", "ggplot2", "reshape2")
melt(img)
df = melt(img) %>% set_colnames(c("x","y","val"))
ggplot(df, aes(x=x, y=y)) + geom_raster(fill=value)
ggplot(df, aes(x=x, y=y, fill=value)) + geom_raster()
ggplot(df, aes(x=x, y=y, fill=val)) + geom_raster()
img = str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% sapply(. %>% as.numeric) %>% {stfu(matrix(., ncol=linewidth, byrow = TRUE))} %>% rotate
df = melt(img) %>% set_colnames(c("x","y","val"))
ggplot(df, aes(x=x, y=y, fill=val)) + geom_raster()
ggplot(df, aes(x=x, y=y, fill=val)) + geom_raster() + cowplot::theme_nothing()
img = str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% {stfu(matrix(., ncol=linewidth, byrow = TRUE))} %>% rotate
df = melt(img) %>% set_colnames(c("x","y","val"))
ggplot(df, aes(x=x, y=y, fill=val)) + geom_raster() + cowplot::theme_nothing() + theme
ggplot(df, aes(x=x, y=y, fill=val)) + geom_raster() + cowplot::theme_nothing()
ggplot(df, aes(x=x, y=y, fill=val)) + geom_raster() + cowplot::theme_nothing() + scale_fill_manual(c("black","white"))
ggplot(df, aes(x=x, y=y, fill=val)) + geom_raster() + cowplot::theme_nothing() + scale_fill_manual(values = c("black","white"))
ggplot(df, aes(x=x, y=y, fill=val)) + geom_raster() + cowplot::theme_nothing() + scale_fill_manual(values = c("white","black"))
#code = "111110101100101011011110"
code="as"
rotate <- function(x) t(apply(x, 2, rev))
img = str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% {stfu(matrix(., ncol=linewidth, byrow = TRUE))} %>% rotate
df = melt(img) %>% set_colnames(c("x","y","val"))
ggplot(df, aes(x=x, y=y, fill=val)) + geom_raster() + cowplot::theme_nothing() + scale_fill_manual(values = c("white","black"))
#code = "111110101100101011011110"
code="010111100"
rotate <- function(x) t(apply(x, 2, rev))
img = str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% {stfu(matrix(., ncol=linewidth, byrow = TRUE))} %>% rotate
df = melt(img) %>% set_colnames(c("x","y","val"))
ggplot(df, aes(x=x, y=y, fill=val)) + geom_raster() + cowplot::theme_nothing() + scale_fill_manual(values = c("white","black"))
#code = "111110101100101011011110"
code="111110101100101011011110"
img = str_replace_all(text, code,"") %>% {str_split(., "")[[1]]} %>% {stfu(matrix(., ncol=linewidth, byrow = TRUE))} %>% rotate
rotate <- function(x) t(apply(x, 2, rev))
df = melt(img) %>% set_colnames(c("x","y","val"))
ggplot(df, aes(x=x, y=y, fill=val)) + geom_raster() + cowplot::theme_nothing() + scale_fill_manual(values = c("white","black"))
library(rms)
fit <- survfit(Surv(time, status) ~ x, data = aml)
fit
fit <- coxph(Surv(futime, fustat) ~ age, data = ovarian)
survfit(fit)
fit <- coxph(Surv(futime, fustat) ~ age, data = lung)
fit <- coxph(Surv(time, status==2) ~ age, data = lung)
survfit(fit)
a=make.socket("192.168.0.3",port=13,server=FALSE)
make.socket
a=make.socket("127.0.0.1",port=13,server=FALSE)
server <- function(){
while(TRUE){
writeLines("Listening...")
con <- socketConnection(host="127.0.0.1", port = 7337, blocking=TRUE,
server=TRUE, open="r+")
data <- readLines(con, 1)
print(data)
close(con)
}
}
client <- function(){
while(TRUE){
con <- socketConnection(host="127.0.0.1", port = 7337, blocking=TRUE,
server=FALSE, open="r+")
sendme <- readline("Enter text to be upper-cased, q to quit")
if(tolower(sendme)=="q"){
break
}
write_resp <- writeLines(sendme, con)
close(con)
}
}
client()
client()
client <- function(){
while(TRUE){
con <- socketConnection(host="192.168.2.1", port = 7337, blocking=TRUE,
server=FALSE, open="r+")
sendme <- readline("Enter text to be upper-cased, q to quit")
if(tolower(sendme)=="q"){
break
}
write_resp <- writeLines(sendme, con)
close(con)
}
}
client()
server <- function(){
while(TRUE){
writeLines("Listening...")
con <- socketConnection(host="localhost", port = 7337, blocking=TRUE,
server=TRUE, open="r+")
data <- readLines(con, 1)
print(data)
close(con)
}
}
client <- function(){
while(TRUE){
con <- socketConnection(host="192.168.2.254", port = 7337, blocking=TRUE,
server=FALSE, open="r+")
sendme <- readline("Enter text to be upper-cased, q to quit")
if(tolower(sendme)=="q"){
break
}
write_resp <- writeLines(sendme, con)
close(con)
}
}
client()
client <- function(){
while(TRUE){
con <- socketConnection(host="127.0.0.1", port = 7337, blocking=TRUE,
server=FALSE, open="r+")
sendme <- readline("Enter text to be upper-cased, q to quit")
if(tolower(sendme)=="q"){
break
}
write_resp <- writeLines(sendme, con)
close(con)
}
}
client()
server <- function(){
while(TRUE){
writeLines("Listening...")
con <- socketConnection(host="192.168.2.1", port = 7337, blocking=TRUE,
server=TRUE, open="r+")
data <- readLines(con, 1)
print(data)
close(con)
}
}
client <- function(){
while(TRUE){
con <- socketConnection(host="192.168.2.1", port = 7337, blocking=TRUE,
server=FALSE, open="r+")
sendme <- readline("Enter text to be upper-cased, q to quit")
if(tolower(sendme)=="q"){
break
}
write_resp <- writeLines(sendme, con)
close(con)
}
}
client()
server()
server <- function(){
while(TRUE){
writeLines("Listening...")
con <- socketConnection(host="192.168.2.1", port = 7337, blocking=TRUE,
server=TRUE, open="r+")
data <- readLines(con, 1)
print(data)
close(con)
}
}
client <- function(){
while(TRUE){
con <- socketConnection(host="192.168.2.1", port = 7337, blocking=TRUE,
server=FALSE, open="r+")
sendme <- readline("Enter text to be upper-cased, q to quit: ")
if(tolower(sendme)=="q"){
break
}
write_resp <- writeLines(sendme, con)
close(con)
}
}
client()
server()
client()
server <- function(){
while(TRUE){
writeLines("Listening...")
con <- socketConnection(host="192.168.2.1", port = 7337, blocking=TRUE,
server=TRUE, open="r+")
data <- readLines(con, 1)
print(data)
close(con)
}
}
client <- function(){
while(TRUE){
con <- socketConnection(host="192.168.2.1", port = 7337, blocking=TRUE,
server=FALSE, open="r+")
sendme <- readline("Enter text to be upper-cased, q to quit: ")
if(tolower(sendme)=="q"){
break
}
write_resp <- writeLines(sendme, con)
close(con)
}
}
#server()
library(crayon)
cat(red("hallo"),"\n")
library(crayon)
cat(red("hoi"))
cat(black(red("hoi")))
black(red("hoi"))
red("hoi")
reset(red("hoi"))
cat(reset(red("hoi")))
cat(strip_style(red("hoi")))
text = "The hexadecimal numeral system, also known as just hex, is a numeral system made up of 16 symbols (base 16). The standard numeral system is called decimal (base 10) and uses ten symbols: 0,1,2,3,4,5,6,7,8,9. Hexadecimal uses the decimal numbers and includes six extra symbols. There are no symbols that mean ten, or eleven etc. so these symbols are letters taken from the English alphabet: A, B, C, D, E and F. Hexadecimal A = decimal 10, and hexadecimal F = decimal 15.
Humans mostly use the decimal system. This is probably because humans have ten fingers (ten digits). Computers however, only have on and off, called a binary digit (or bit, for short). A binary number is just a string of zeros and ones: 11011011, for example. For convenience, engineers working with computers tend to group bits together. In earlier days, such as the 1960's, they would group 3 bits at a time (much like large decimal numbers are grouped in threes, like the number 123,456,789). Three bits, each being on or off, can represent the eight numbers from 0 to 7: 000 = 0; 001 = 1; 010 = 2; 011 = 3; 100 = 4; 101 = 5; 110 = 6 and 111 = 7. This is called octal.
As computers got bigger, it was more convenient to group bits by four instead of three. This doubles the numbers that the symbol would represent; it can have 16 values instead of eight. Hex = 6 and Decimal = 10, so it is called hexadecimal. Four bits is called a nibble (sometimes spelled nybble). A nibble is one hexadecimal digit, and is written using a symbol 0-9 or A-F. Two nibbles is a byte (8 bits). Most computer operations use the byte, or a multiple of the byte (16 bits, 24, 32, 64, etc.). Hexadecimal makes it easier to write these large binary numbers.
To avoid confusion with decimal, octal or other numbering systems, hexadecimal numbers are sometimes written with a \"h\" after the number. For example, 63h means 63 hexadecimal. Software developers quite often use 0x before the number (0x63)."
text = "The hexadecimal numeral system, also known as just hex, is a numeral system made up of 16 symbols (base 16).
The standard numeral system is called decimal (base 10) and uses ten symbols: 0,1,2,3,4,5,6,7,8,9. Hexadecimal uses the decimal numbers and includes six extra symbols.
There are no symbols that mean ten, or eleven etc. so these symbols are letters taken from the English alphabet: A, B, C, D, E and F.
Hexadecimal A = decimal 10, and hexadecimal F = decimal 15.
Humans mostly use the decimal system. This is probably because humans have ten fingers (ten digits).
Computers however, only have on and off, called a binary digit (or bit, for short). A binary number is just a string of zeros and ones: 11011011, for example.
For convenience, engineers working with computers tend to group bits together. In earlier days, such as the 1960's,
they would group 3 bits at a time (much like large decimal numbers are grouped in threes, like the number 123,456,789).
Three bits, each being on or off, can represent the eight numbers from 0 to 7: 000 = 0; 001 = 1; 010 = 2; 011 = 3; 100 = 4; 101 = 5; 110 = 6 and 111 = 7.
This is called octal. As computers got bigger, it was more convenient to group bits by four instead of three.
This doubles the numbers that the symbol would represent; it can have 16 values instead of eight. Hex = 6 and Decimal = 10, so it is called hexadecimal.
Four bits is called a nibble (sometimes spelled nybble). A nibble is one hexadecimal digit, and is written using a symbol 0-9 or A-F.
Two nibbles is a byte (8 bits). Most computer operations use the byte, or a multiple of the byte (16 bits, 24, 32, 64, etc.).
Hexadecimal makes it easier to write these large binary numbers. To avoid confusion with decimal, octal or other numbering systems,
hexadecimal numbers are sometimes written with a \"h\" after the number. For example, 63h means 63 hexadecimal.
Software developers quite often use 0x before the number (0x63)."
cat(text)
text = "The hexadecimal numeral system, also known as just hex, is a numeral system made up of 16 symbols (base 16).
The standard numeral system is called decimal (base 10) and uses ten symbols: 0,1,2,3,4,5,6,7,8,9. Hexadecimal uses the decimal numbers and includes six extra symbols.
There are no symbols that mean ten, or eleven etc. so these symbols are letters taken " %+% "f" %+% "rom the English alphabet: A, B, C, D, E and F.
Hexadecimal A = decimal 10, and hexadecimal F = decimal 15.
Humans mostly use the decimal system. This is probably because humans have ten fingers (ten digits).
Computers however, only have on and off, called a binary digit (or bit, for short). A binary number is just a string of zeros and ones: 11011011, for example.
For convenience, engineers working with computers tend to group bits together. In earlier days, such as the 1960's,
they would group 3 bits at a time (much like large decimal numbers are grouped in threes, like the number 123,456,789).
Three bits, each being on or off, can represent the eight numbers from 0 to 7: 000 = 0; 001 = 1; 010 = 2; 011 = 3; 100 = 4; 101 = 5; 110 = 6 and 111 = 7.
This is called octal. As computers got bigger, it was more convenient to group bits by four instead of three.
This doubles the numbers that the symbol would represent; it can have 16 values instead of eight. Hex = 6 and Decimal = 10, so it is called hexadecimal.
Four bits is called a nibble (sometimes spelled nybble). A nibble is one hexadecimal digit, and is written using a symbol 0-9 or A-F.
Two nibbles is a byte (8 bits). Most computer operations use the byte, or a multiple of the byte (16 bits, 24, 32, 64, etc.).
Hexadecimal makes it easier to write these large binary numbers. To avoid confusion with decimal, octal or other numbering systems,
hexadecimal numbers are sometimes written with a \"h\" after the number. For example, 63h means 63 hexadecimal.
Software developers quite often use 0x before the number (0x63)."
text
text = "The hexadecimal numeral system, also known as just hex, is a numeral system made up of 16 symbols (base 16).
The standard numeral system is called decimal (base 10) and uses ten symbols: 0,1,2,3,4,5,6,7,8,9. Hexadecimal uses the decimal numbers and includes six extra symbols.
There are no symbols that mean ten, or eleven etc. so these symbols are letters taken " %+% cyan("f") %+% "rom the English alphabet: A, B, C, D, E and F.
Hexadecimal A = decimal 10, and hexadecimal F = decimal 15.
Humans mostly use the decimal system. This is probably because humans have ten fingers (ten digits).
Computers however, only have on and off, called a binary digit (or bit, for short). " %+% cyan("A") %+% " binary number is just a string of zeros and ones: 11011011, for example.
For convenience, engineers working with computers tend to group bits together. In earlier days, such as the 1960's,
they would group 3 bits at a time (much like large decimal numbers are grouped in threes, like the number 123,456,789).
Three bits, each being on or off, can represent the eight numbers from 0 to 7: 000 = 0; 001 = 1; 010 = 2; 011 = 3; 100 = 4; 101 = 5; 110 = 6 and 111 = 7.
This is called o"%+% cyan("c") %+% "tal. As computers got bigger, it was more convenient to group bits by four instead of three.
This doubles the numbers that the symbol would represent; it can h"%+% cyan("a") %+% "ve 16 values instead of eight.
Hex = 6 and Decimal = 10, so it is called hexa"%+% cyan("d") %+% "ecimal.
Four bits is called a nibble (sometimes spelled nybble). A nibble is one hexadecimal digit, and is written using a symbol 0-9 or A-F.
Two nibbles is a byte (8 bits). Most computer operations use the byte, or a multiple of the byte (16 bits, 24, 32, 64, etc.).
Hexadecimal makes it easier to write these large binary numbers. To avoid confusion with decimal, octal or other numbering systems,
hexadecimal numbers are sometim"%+% cyan("e") %+% "s written with a \"h\" after the number. For example, 63h means 63 hexadecimal.
Software developers quite often use 0x before the number (0x63)."
cat(text)
cat(strip_style(text))
